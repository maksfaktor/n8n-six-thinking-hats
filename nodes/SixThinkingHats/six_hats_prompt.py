import sys
import json
import logging
import os
from anthropic import Anthropic
from hat_handlers import HatHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
current_dir = os.path.dirname(os.path.abspath(__file__))
log_file = os.path.join(current_dir, 'six_hats.log')

print(f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current_dir}")
print(f"–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤: {log_file}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
try:
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(sys.stdout),
            logging.FileHandler(log_file)
        ]
    )
    print("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
    sys.exit(1)

logger = logging.getLogger(__name__)

def print_dialogue_header(topic):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∏–∞–ª–æ–≥–∞"""
    separator = "=" * 70
    print(f"\n{separator}")
    print(f"üéØ –ê–ù–ê–õ–ò–ó –¢–ï–ú–´: {topic}")
    print(f"{separator}\n")

def main():
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–µ—Å—Ç–∏ —à–ª—è–ø –º—ã—à–ª–µ–Ω–∏—è")
        print("–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–µ—Å—Ç–∏ —à–ª—è–ø –º—ã—à–ª–µ–Ω–∏—è")

        if len(sys.argv) != 4:
            error_msg = "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"
            logger.error(error_msg)
            print(json.dumps({"error": error_msg}))
            sys.exit(1)

        topic = sys.argv[1]
        selected_hats = json.loads(sys.argv[2])
        api_key = sys.argv[3]

        print(f"–¢–µ–º–∞: {topic}")
        print(f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ —à–ª—è–ø—ã: {selected_hats}")
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: —Ç–µ–º–∞='{topic}', —à–ª—è–ø—ã={selected_hats}")

        if not api_key:
            error_msg = "API –∫–ª—é—á Anthropic –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"
            logger.error(error_msg)
            print(json.dumps({"error": error_msg}))
            sys.exit(1)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Anthropic
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Anthropic")
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Anthropic –∫–ª–∏–µ–Ω—Ç–∞")
        client = Anthropic(api_key=api_key)
        handler = HatHandler(client)

        # –ü–µ—á–∞—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∏–∞–ª–æ–≥–∞
        print_dialogue_header(topic)

        results = {}
        all_formatted_outputs = []

        for hat in selected_hats:
            print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–ª—è–ø—ã: {hat}")
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–ª—è–ø—ã: {hat}")
            result = handler.process_hat(hat, topic)
            results[hat] = result
            if 'formatted_output' in result:
                all_formatted_outputs.append(result['formatted_output'])

        # –ü–µ—á–∞—Ç–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        print("\n" + "=" * 70 + "\n")

        logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è n8n
        n8n_results = {hat: {
            'analysis': results[hat]['analysis'],
            'hat_color': hat
        } for hat in selected_hats if 'analysis' in results[hat]}

        print(json.dumps(n8n_results, ensure_ascii=False))
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {json.dumps(n8n_results, ensure_ascii=False)}")

    except Exception as e:
        error_msg = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        logger.error(error_msg, exc_info=True)
        print(json.dumps({"error": error_msg}))
        sys.exit(1)

if __name__ == "__main__":
    main()